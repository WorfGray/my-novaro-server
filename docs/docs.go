// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/collections/add": {
            "post": {
                "description": "Add a tweet to user's collections",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Collect a tweet",
                "parameters": [
                    {
                        "description": "Collection information",
                        "name": "collection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Collections"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Collections"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/collections/remove": {
            "delete": {
                "description": "Remove a tweet from user's collections",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Remove a tweet from collections",
                "parameters": [
                    {
                        "description": "Collection information",
                        "name": "collection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Collections"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Collections"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/comments/add": {
            "post": {
                "description": "Add a new comment to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Add a new comment",
                "parameters": [
                    {
                        "description": "Comment object",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Comments"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Comments"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/comments/getCommentsListByParentId": {
            "get": {
                "description": "Get a list of child comments for a specific parent comment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get comments by parent ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Parent Comment ID",
                        "name": "parentId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Comments"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/comments/getCommentsListByPostId": {
            "get": {
                "description": "Get a list of comments for a specific post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get comments by post ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "postId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Comments"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/comments/getCommentsListByUserId": {
            "get": {
                "description": "Get a list of comments made by a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get comments by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Comments"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/posts/delPostsById": {
            "delete": {
                "description": "Delete a post by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete a post by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/posts/getPostsById": {
            "get": {
                "description": "Retrieve posts based on the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get posts by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Posts ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved post"
                    },
                    "400": {
                        "description": "Error message"
                    }
                }
            }
        },
        "/api/posts/getPostsByUserId": {
            "get": {
                "description": "Retrieve posts based on the provided UserId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get posts by UserId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Posts UserId",
                        "name": "userId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved post"
                    },
                    "400": {
                        "description": "Error message"
                    }
                }
            }
        },
        "/api/posts/getPostsList": {
            "get": {
                "description": "Get a list of posts based on query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get a list of posts",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "userId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Posts"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/posts/savePosts": {
            "post": {
                "description": "Save a new post or update an existing one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Save a new post",
                "parameters": [
                    {
                        "description": "Post object",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Posts"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Posts"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/reposts/add": {
            "post": {
                "description": "Add a new repost to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reposts"
                ],
                "summary": "Add a new repost",
                "parameters": [
                    {
                        "description": "Repost object",
                        "name": "repost",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RePosts"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " Successfully added reposts"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/tags/getTagsList": {
            "get": {
                "description": "Retrieve a list of all available tags",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Get list of tags",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Tags"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/api/tags/records/add": {
            "post": {
                "description": "Add new tags records to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags-records"
                ],
                "summary": "Add new tags records",
                "parameters": [
                    {
                        "description": "Tags Records object",
                        "name": "tagsRecords",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.TagsRecords"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": " Successfully added tags records"
                    },
                    "400": {
                        "description": " Error adding tags records"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Collections": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "model.Comments": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Comments"
                    }
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "model.Posts": {
            "type": "object",
            "properties": {
                "collectionsAmount": {
                    "type": "integer"
                },
                "commentsAmount": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "repostsAmount": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Tags"
                    }
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "model.RePosts": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "model.Tags": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "tagColor": {
                    "type": "string"
                },
                "tagType": {
                    "type": "string"
                }
            }
        },
        "model.TagsRecords": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "postId": {
                    "type": "string"
                },
                "tagId": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
